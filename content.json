{"meta":{"title":"沧海一粟","subtitle":"个人博客","description":"沧海一粟的个人博客","author":"GarryGe","url":"http://garryge.github.io"},"pages":[{"title":"关于","date":"2018-03-10T16:31:33.000Z","updated":"2018-03-10T16:31:33.000Z","comments":false,"path":"about/index.html","permalink":"http://garryge.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-03-10T13:01:07.000Z","updated":"2018-03-10T13:01:07.000Z","comments":false,"path":"categories/index.html","permalink":"http://garryge.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-03-10T13:01:12.000Z","updated":"2018-03-10T13:01:12.000Z","comments":false,"path":"tags/index.html","permalink":"http://garryge.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git入门与实践","slug":"git-intro-practice","date":"2019-04-22T16:00:00.000Z","updated":"2019-04-23T13:33:30.120Z","comments":true,"path":"2019/04/23/git-intro-practice/","link":"","permalink":"http://garryge.github.io/2019/04/23/git-intro-practice/","excerpt":"","text":"摘录自《GitHub入门与实践》 初始设置 设置姓名和邮箱地址git config --global user.name “name”git config --global user.email &quot;email@example.com&quot;~/.gitconfig文件中增加如下一行：123[user] name = name email = email@example.com 提高命令输出的可读性git config --global color.ui auto~/.gitconfig文件中增加如下一行：12[color] ui = auto 基本操作 初始化仓库git init 查看仓库的状态git status 向暂存区中添加文件git add README.md 保存仓库的历史记录git commitgit commit -m &quot;First commit&quot;在编辑器中记录提交信息的格式如下：第一行：用一行文字简述提交的更改内容第二行：空行第三行以后：记录更改的原因和详细内容 查看提交日志git loggit log --pretty=short # 只显示第一行简述信息git log README.mdgit log -p # 查看提交所带来的改动git log -p README.md 查看更改前后的差别git diffgit diff HEAD # 查看与最新提交内容的差别 分支的操作 显示分支一览表git branch 创建、切换分支git checkout -b feature-A # 创建并切换分支feature-Agit checkout master # 切换到master分支git checkout - # 切换回上一个分支 合并分支git merge --no-ff feature-A 以图表形式查看分支git log --graph 更改提交的操作 回溯历史版本git reset --head 4d0cbf0 # 回溯到4d0cbf0的状态git reflog # 查看当前仓库执行过的操作的日志 修改提交信息git commit --amend # 修改上一条提交信息 压缩历史git rebase -i HEAD~2 # 选定当前分支中包含HEAD（最新提交）在内的两个最新历史记录为对象，进行压缩合并 推送至远程仓库 添加远程仓库git remote add origin git@github.com:xxx.git # 将xxx.git远程仓库的名称设置为origin（标识符） 推送至远程仓库git push -u origin master # -u参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的上游。git push -u origin feature-D 从远程仓库获取 获取远程仓库git clone git@github.com:xxx.git # 默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。即：当前本地仓库的master分支与GitHub端远程仓库（origin）的master分支在内容是完全相同的git branch -a # 查看当前分支的相关信息，-a参数同时显示本地仓库和远程仓库的分支信息git checkout -b feature-D origin/feature-D # 将feature-D分支获取至本地仓库 获取最新的远程仓库分支git pull origin feature-D # 将本地的分支，更新到最新","categories":[{"name":"Git","slug":"Git","permalink":"http://garryge.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://garryge.github.io/tags/Git/"}]},{"title":"Mac下iTerm2的快捷键","slug":"mac-iterm2-shortcut-key","date":"2018-03-17T16:00:00.000Z","updated":"2018-03-18T06:02:55.000Z","comments":true,"path":"2018/03/18/mac-iterm2-shortcut-key/","link":"","permalink":"http://garryge.github.io/2018/03/18/mac-iterm2-shortcut-key/","excerpt":"","text":"操作环境Mac: OS X El Capitan 10.11.6iTerm2: 3.0.10 配置前提Option的默认功能是配合输入特殊字符，并非alt键。因此，需要更改映射关系。“Preferences” -&gt; “Profiles” -&gt; “Your Profile” -&gt; “Keys” -&gt; 界面的下方有关于 Left/Right option key 的映射，改成 “+Esc” 就可以了（可以单独设置左边的Option映射，也可以两边同时修改，依据个人的使用习惯）。如下图所示： 快速移动（快移）快移到行首前移一个词前移一个字符光标后移一个字符后移一个词快移到行尾CTRL + AALT + BCTRL + B(光标)CTRL + FALT + FCTRL + E 快速删除（快删）快删到行首前删一个词前删一个字符光标后删一个字符后删一个词快删到行尾CTRL + UCTRL + WCTRL + H(光标)CTRL + DALT + DCTRL + K 快速查找（快查）快查功能快捷键上一条命令CTRL + P----------------历史命令CTRL + R----------------下一条命令CTRL + N 快速清屏（快清）CTRL + L","categories":[{"name":"工具篇","slug":"工具篇","permalink":"http://garryge.github.io/categories/工具篇/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://garryge.github.io/tags/工具/"},{"name":"效率","slug":"效率","permalink":"http://garryge.github.io/tags/效率/"},{"name":"Mac","slug":"Mac","permalink":"http://garryge.github.io/tags/Mac/"},{"name":"iTerm2","slug":"iTerm2","permalink":"http://garryge.github.io/tags/iTerm2/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-09T16:00:00.000Z","updated":"2018-03-18T05:30:22.000Z","comments":true,"path":"2018/03/10/hello-world/","link":"","permalink":"http://garryge.github.io/2018/03/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\"More info: Writing Run server1$ hexo serverMore info: Server Generate static files1$ hexo generateMore info: Generating Deploy to remote sites1$ hexo deployMore info: Deployment","categories":[{"name":"Blog","slug":"Blog","permalink":"http://garryge.github.io/categories/Blog/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://garryge.github.io/tags/Blog/"},{"name":"Hexo","slug":"Hexo","permalink":"http://garryge.github.io/tags/Hexo/"}]}]}